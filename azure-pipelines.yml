# Schema docs at https://aka.ms/yaml
trigger:
  - master

jobs:
  - job: precheck_concurrent
    # This job schedules long-running tasks concurrently with the rest of the
    # build pipeline ensuring that later stages don't block on them
    # We'll merge it back into the `precheck` stage once Pipelines has caching.
    pool:
      vmImage: 'Ubuntu 16.04'
    strategy:
      matrix:
        check-whole-repo-tests:
          TASK: check-whole-repo-tests
    steps:
    - script: sudo apt-get install libreadline-dev libsqlite3-dev
      displayName: Install apt dependencies
    - script: ./build.sh check-installed
      displayName: Install Python
    - script: ./build.sh
      displayName: Run build tasks

  - job: precheck
    pool:
      vmImage: 'Ubuntu 16.04'
    strategy:
      matrix:
        lint:
          TASK: lint
        lint-ruby:
          TASK: lint-ruby
        check-format:
          TASK: check-format
        check-rust-tests:
          TASK: check-rust-tests
    steps:
    - script: sudo apt-get install libreadline-dev libsqlite3-dev
      displayName: Install apt dependencies
    - script: ./build.sh check-installed
      displayName: Install Python
    - script: ./build.sh
      displayName: Run build tasks

  - job: main
    dependsOn: precheck
    pool:
      vmImage: 'Ubuntu 16.04'
    strategy:
      matrix:
        check-coverage:
          TASK: check-coverage
        check-pypy:
          TASK: check-pypy
        check-pypy3:
          TASK: check-pypy3
        check-py36:
          TASK: check-py36
        check-py27:
          TASK: check-py27
        check-py35:
          TASK: check-py35
        check-py37:
          TASK: check-py37
        check-quality:
          TASK: check-quality
        check-ruby-tests:
          TASK: check-ruby-tests
        check-unicode:
          TASK: check-unicode
        check-py27-typing:
          TASK: check-py27-typing
        check-nose:
          TASK: check-nose
        check-pytest30:
          TASK: check-pytest30
        check-django21:
          TASK: check-django21
        check-django20:
          TASK: check-django20
        check-django111:
          TASK: check-django111
        check-pandas19:
          TASK: check-pandas19
        check-pandas22:
          TASK: check-pandas22
        check-pandas23:
          TASK: check-pandas23
        check-pandas24:
          TASK: check-pandas24
    steps:
    - script: sudo apt-get install libreadline-dev libsqlite3-dev
      displayName: Install apt dependencies
    - script: ./build.sh check-installed
      displayName: Install Python
    - script: ./build.sh
      displayName: Run tests

  - job: windows
    dependsOn: precheck
    pool:
      vmImage: 'windows-2019'
    strategy:
      matrix:
        check-py27-x64:
          python.version: '2.7'
          python.architecture: 'x64'
        check-py27-x86:
          python.version: '2.7'
          python.architecture: 'x86'
        check-py36-x64:
          python.version: '3.6'
          python.architecture: 'x64'
        check-py36-x86:
          python.version: '3.6'
          python.architecture: 'x86'
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(python.version)'
        architecture: '$(python.architecture)'
    # TODO: installing `hypothesis-python/[all]` leads to some Numpy-related
    # errors at pytest collection time, but I'm not sure why.  Once we fix
    # that, we can test the extras on Windows, and thus drop Appveyor.
    - script: |
        python -m pip install --upgrade setuptools pip wheel twine
        python -m pip install setuptools -r requirements/test.txt
        python -m pip install hypothesis-python/
      displayName: Install dependencies
    - script: python -m pytest hypothesis-python/tests/cover
      displayName: Run tests

  - job: osx
    dependsOn: precheck
    pool:
      vmImage: 'macOS-10.13'
    strategy:
      matrix:
        check-py27:
          TASK: check-py27
        check-py36:
          TASK: check-py36
    steps:
    - script: |
        brew update
        brew install readline xz ncurses
        ./build.sh install-core
      displayName: Install dependencies
    - script: ./build.sh
      displayName: Run tests

# TODO: Deploy jobs dependent on above
